// comment!
tokenizer {
    @skip Whitespace r'\s+'
    @skip Comment r'//.*$'
    @error ErrorToken r'\S+'
    String {
        let mut raw = false ;
        if l.peek().unwrap() == b'r' {
            raw = true ;
            l.next() ;
        }

        let mut balance = 0 ;
        loop {
            match l.next() {
                Some(b'#') => balance += 1,
                Some(b'\'') => break,
                _ => return None,
            }
        }

        loop {
            match l.next() {
                None => return None,
                Some(b'\\') if !raw => {
                    l.next() ;
                }
                Some(b'\'') => {
                    let mut balance = balance ;
                    loop {
                        if balance == 0 {
                            return Literal ;
                        }
                        if let Some(b'#') = l.next() {
                            balance -= 1 ;
                        } else {
                            break ;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    InlineKeyword 'inline'
    TokenizerKeyword 'tokenizer'
    RuleKeyword 'rule'
    GroupKeyword 'group'
    Ident r'\w+'
    Number '[0-9]+'
    LCurly '{'
    RCurly '}'
    LParen '('
    RParen ')'
    LBracket '['
    RBracket ']'
    LAngle '<'
    RAngle '>'
    Question '?'
    Pipe '|'
    Plus '+'
    At '@'
    Colon ':'
    Comma ','
    Dot '.'
}

@root File = (Tokenizer | SynRule | Group)* ;

comma_list(element) = <separated_list element ','> ;
delimited(bra, ket) = bra (<DelimitedExpr> | <not ket>)* ket ;

DelimitedExpr = ParenDelimited | BraceDelimited | BracketDelimited ;
ParenDelimited = <delimited '(' ')'> ;
BraceDelimited = <delimited '{' '}'> ;
BracketDelimited = <delimited '[' ']'> ;

AttributeValue = String | Ident | Number ;
AttributeExpr = Ident ( '(' AttributeValue ')' )? ;
Attribute = '@' Ident ( '(' <comma_list AttributeExpr> ')' )? ;

TokenRule = Attribute* Ident (String | BraceDelimited) ;
Tokenizer = 'tokenizer' '{' TokenRule* '}' ;

Parameters = '(' <comma_list Ident> ')' ;
SynRule = Attribute* ('inline' | 'rule') Ident Parameters? '{' Expr '}' ;

Group = 'group' Ident '{' GroupItem* '}' ;
GroupItem = Ident Ident ;

pratt Expr {
    CallExpr = '<' Ident Expr? '>' ;
    ParenExpr = '(' Expr ')' ;
    PreExpr = Attribute+ Expr ;
    PostExpr = Expr ('?' | '*' | '+') ;
    PostName = Expr ':' Ident ('.' Ident)? ;
    SeqExpr = Expr Expr+ ;
    BinExpr = Expr '|' Expr ;
}