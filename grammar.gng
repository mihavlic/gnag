// comment!
tokenizer {
    @skip Whitespace r'\s+'
    @skip Comment r'//.*$'
    @error ErrorToken r'\S+'
    String {
        let mut raw = false;
        if l.peek().unwrap() == b'r' {
            raw = true;
            l.next();
        }

        let mut balance = 0;
        loop {
            match l.next() {
                Some(b'#') => balance += 1,
                Some(b'\'') => break,
                _ => return None,
            }
        }

        loop {
            match l.next() {
                None => return None,
                Some(b'\\') if !raw => {
                    l.next();
                }
                Some(b'\'') => {
                    let mut balance = balance;
                    loop {
                        if balance == 0 {
                            return Literal;
                        }
                        if let Some(b'#') = l.next() {
                            balance -= 1;
                        } else {
                            break;
                        }
                    }
                }
                _ => {}
            }
        }
    }
    InlineKeyword 'inline'
    TokenizerKeyword 'tokenizer'
    RuleKeyword 'rule'
    GroupKeyword 'group'
    Ident r'\w+'
    Number '[0-9]+'
    LCurly '{'
    RCurly '}'
    LParen '('
    RParen ')'
    LBracket '['
    RBracket ']'
    LAngle '<'
    RAngle '>'
    Question '?'
    Pipe '|'
    Plus '+'
    At '@'
    Colon ':'
    Comma ','
    Dot '.'
}

@root
rule File {
    Item*
}

rule Item {
    Tokenizer | SynRule | Group
}

rule AttributeValue {
    String | Ident | Number
}

rule AttributeExpr {
    Ident ( '(' AttributeValue ')' )?
}

rule Attribute {
    '@' Ident ( '(' <comma_list AttributeExpr> ')' )?
}

rule Tokenizer {
    'tokenizer' '{' TokenRule* '}'
}

inline comma_list(element) {
    <separated_list element ','>
}

inline DelimitedExpr {
    ParenDelimited | BraceDelimited | BracketDelimited
}

inline delimited(bra, ket) {
    bra (DelimitedExpr | <not ket>)* ket
}

rule ParenDelimited {
    <delimited '(' ')'>
}

rule BraceDelimited {
    <delimited '{' '}'>
}

rule BracketDelimited {
    <delimited '[' ']'>
}

rule TokenRule {
    Attribute* Ident (String | BraceDelimited)
}

rule SynRule {
    Attribute* ('inline' | 'rule') Ident Parameters? '{' Expr '}'
}

rule Parameters {
   '(' <comma_list Ident> ')'
}

@pratt
rule Expr {
    Ident | String | CallExpr | ParenExpr | PreExpr | PostExpr | PostName | SeqExpr | BinExpr
}

rule CallExpr {
    '<' Ident Expr? '>'
}

rule ParenExpr {
    '(' Expr ')'
}

rule PreExpr {
    Attribute+ Expr
}

rule PostExpr {
    Expr ('?' | '+')
}

rule PostName {
    Expr ':' Ident ('.' Ident)?
}

rule SeqExpr {
    Expr Expr+
}

rule BinExpr {
    Expr '|' Expr
}

rule Group {
    'group' Ident '{' GroupItem* '}' 
}

rule GroupItem {
    Ident Ident
}