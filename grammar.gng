lexer {
    Newline = '\n'
    
    @skip
    Whitespace = <ascii_whitespace>+
    @skip
    Comment = '//' <consume_until '\n'>

    String = <string_like '\''>

    @word
    Ident = <ascii_identifier_start> <ascii_identifier_continue>*
    
    @keyword InlineKeyword = 'inline'
    @keyword LexerKeyword = 'lexer'
    @keyword ParserKeyword = 'parser'
    @keyword PrattKeyword = 'pratt'
    @keyword GroupKeyword = 'group'

    LCurly = '{'
    RCurly = '}'
    LParen = '('
    RParen = ')'
    LBracket = '['
    RBracket = ']'
    LAngle = '<'
    RAngle = '>'
    Question = '?'
    Pipe = '|'
    Star = '*'
    Plus = '+'
    At = '@'
    Colon = ':'
    Comma = ','
    Dot = '.'
    Equals = '='

    Error = <not <ascii_whitespace>>+ | <any_utf8>
}

parser {
    @root
    File = (Newline | RuleGroup)*

    RuleGroup = ('lexer' | 'parser') <rules_block>

    Attribute = '@' Ident Newline?
    Parameters = '(' <comma_list Ident> ')'
    Rule = Attribute* Ident Parameters? '=' Expr Newline?

    Expr = pratt {
        Atom = Ident | String
        CallExpr = '<' Ident Expr? '>'
        ParenExpr = '(' Expr? ')'
        PrattExpr = 'pratt' <rules_block>

        PostExpr = Expr ('?' | '*' | '+')
        Sequence = Expr Expr+
        Choice = Expr ('|' Expr)+
    }

    rules_block() = Newline* '{' (Newline | Rule)* '}'
    comma_list(element) = <separated_list element ','>
}
