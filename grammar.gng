tokens {
    Newline = '\n'
    
    @skip
    Whitespace = r'[ \t]+'
    @skip
    Comment = r'//.*$'
    @error
    ErrorToken = r'\S+'

    String = r'TODO' # 'r'? <string_like '\''> # TODO

    InlineKeyword = 'inline'
    TokensKeywords = 'tokens'
    RulesKeyword = 'rules'
    PrattKeyword = 'pratt'
    GroupKeyword = 'group'
    Ident = r'\w+' # <class_word>
    Number = r'[0-9]+' # <charset '0-9'>+
    LCurly = '{'
    RCurly = '}'
    LParen = '('
    RParen = ')'
    LBracket = '['
    RBracket = ']'
    LAngle = '<'
    RAngle = '>'
    Question = '?'
    Pipe = '|'
    Star = '*'
    Plus = '+'
    At = '@'
    Colon = ':'
    Comma = ','
    Dot = '.'
    Equals = '='
}

rules {
    @root
    File = (Newline | Tokens | Rules)*

    Tokens = 'tokens' <brace_delimited_lines Token>
    Rules = 'rules' <brace_delimited_lines Rule>

    Attribute = '@' Ident Newline?
    Token = Attribute* Ident '=' String Newline?

    Parameters = '(' <comma_list Ident> ')'
    Rule = Attribute* Ident Parameters? '=' Expr Newline?

    # Group = 'group' Ident '{' GroupItem* '}'
    # GroupItem = Ident Ident

    Expr = pratt {
        Atom = Ident | String
        CallExpr = '<' Ident Expr? '>'
        ParenExpr = '(' Expr ')'
        PrattExpr = 'pratt' <brace_delimited_lines Rule>

        PostExpr = Expr ('?' | '*' | '+')
        SeqExpr = Expr Expr+
        BinExpr = Expr '|' Expr
    }

    # delimited(bra, ket) = bra (ParenDelimited | BraceDelimited | BracketDelimited | <not ket>)* ket
    # ParenDelimited = <delimited '(' ')'>
    # BraceDelimited = <delimited '{' '}'>
    # BracketDelimited = <delimited '[' ']'>

    brace_delimited_lines(statement) = Newline* '{' (Newline | statement)* '}'
    comma_list(element) = <separated_list element ','>
}
